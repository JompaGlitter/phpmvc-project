<?php

namespace Idun\Comment;

/**
 * To attach comments-flow to a page or some content.
 *
 */
class CommentsInSession implements \Anax\DI\IInjectionAware
{
    use \Anax\DI\TInjectable;



    /**
     * Add a new comment.
     *
     * @param array $comment with all details.
     * 
     * @return void
     */
    public function add($comment, $pagekey)
    {
        $comments = $this->session->get('comments', []);
        $comments[$pagekey][] = $comment;
        $this->session->set('comments', $comments);
    }
    
    
    /**
     * Edit a comment.
     *
     */
    public function edit($comment, $id, $pagekey)
    {
        $comments = $this->session->get('comments', []);
        $comments[$pagekey][$id] = $comment;
        $this->session->set('comments', $comments);
    }



    /**
     * Find one specific comment
     *
     */
    public function findOne($id, $pagekey)
    {
        $comments = $this->session->get('comments', []);
        
        return $comments[$pagekey][$id];
    }
    


    /**
     * Find and return all comments.
     *
     * @return array with all comments.
     */
    public function findAll($pagekey = null)
    {
        $comments = $this->session->get('comments', []);
        
        if (array_key_exists($pagekey, $comments)) {
            return $comments[$pagekey];
        } else {
            return "Det finns inga inlägg här.";
        }
    }



    /**
     * Delete one specific comment
     *
     */
    public function deleteOne($id, $pagekey)
    {
        $comments = $this->session->get('comments', []);
        unset($comments[$pagekey][$id]);
        $this->session->set('comments', $comments);
    }



    /**
     * Delete all comments.
     *
     * @return void
     */
    public function deleteAll($pagekey)
    {
        $comments = $this->session->get('comments', []);
        unset($comments[$pagekey]);
        $this->session->set('comments', $comments);
    }
}
